[{"authors":null,"categories":null,"content":"\nThe Eclipse Keypop project provides API components only.\nAPIs All Keypop APIs are released under the MIT license, to offer maximum permissibility for the design of Keypop implementations.\nA Keypop implementation can be defined with any open or closed license.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1748445847,"objectID":"c59bc2addc45652397e48f88d2688201","permalink":"https://keypop.org/community/license/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/community/license/","section":"community","summary":"License of Keypop components","tags":null,"title":"Project license","type":"book"},{"authors":null,"categories":null,"content":"\nTypes of contributions Thanks for your interest in the Eclipse Keypop® project.\nThere are several ways to contribute to the project:\nPropose a fix for a problem that is already known or that you have identified. In this case you will have to notify the issue in the repository where the problem appeared and reference the issue in all the other repositories affected by the fix. Propose the creation of a new component. In this case you will first have to create an issue in the repository https://github.com/eclipse-keypop to justify the need and request the creation of a new repository, wait for the issue to be resolved by the decision of the committers, and then create an issue in the new repository signifying the start of development of the new component. Eclipse Contributor Agreement Before your contribution can be accepted by the project team contributors must electronically sign the Eclipse Contributor Agreement (ECA).\nhttp://www.eclipse.org/legal/ECA.php Commits that are provided by non-committers must have a Signed-off-by field in the footer indicating that the author is aware of the terms by which the contribution has been provided to the project. The non-committer must additionally have an Eclipse Foundation account and must have a signed Eclipse Contributor Agreement (ECA) on file.\nFor more information, please see the Eclipse Committer Handbook: https://www.eclipse.org/projects/handbook/#contributing\nContributing via fork Check if there is already a GitHub issue for what you want to work on or create one. Announce in the comments section that you want to work on the issue. Also describe the solution you want to implement. To improve the chances for your contribution to be accepted, you’ll want to wait for the feedback of the committers. Fork the repository. Create a new branch from main for your changes. Name it after the issue number, e.g. #XXX_[description_of_changes]. Implement your changes. Rebase on main. Run ./gradlew spotlessApply to format the code and add licence headers to the files. Run ./gradlew build (to check code formatting and run tests) Commit your changes using the -s flag in order to add a Signed-off-by footer as mentioned above and use the same email address you are using for your GitHub account.\nUse commits messages that respect the commits message conventions. Push your changes to your forked repository. Submit a pull request referencing the related issue(s). After submitting, do not use your branch for any other development, otherwise further changes that you make will be visible in the PR. Contributing as a project committer Check if there is already a GitHub issue for what you want to work on or create one. Assign the issue to yourself. Create a new branch from main for your changes. Name it after the issue number, e.g. #XXX_[description_of_changes]. Implement your changes. Rebase on main. Run ./gradlew spotlessApply to format the code and add licence headers to the files. Run ./gradlew build (to check code formatting and run tests) Commit your changes. Use commits messages that respect the commits message conventions. Push the branch into the repository. Submit a pull request and ask somebody who is familiar with the code you modified to review it. If the reviewer approves and all checks are OK, merge using squash \u0026amp; commit method. Commits message conventions In order to ensure good readability of the commit history, it is necessary to have consistency in the structure of the commit messages.\nTherefore, all contributors to the project are asked to respect the structure of the commits messages as described in the guide Conventional Commits 1.0.0:\n\u0026lt;type\u0026gt;[optional scope]: \u0026lt;description\u0026gt; [optional body] \u0026lt;footer(s)\u0026gt; Furthermore, it is requested to indicate in the footer section the associated issue(s) that will be closed (Closes #xxx, closes #yyy, etc.). This will automatically close the associated issue(s) when the pull request is validated (see GitHub Docs for more details).\nIt is also required to indicate possible references to other associated issues (Refs: #aaa, #bbbb, repository_owner/other_repository_name#ccc, etc.).\nHere is fictive example:\nfeat(observation): allow asynchronous notification of reader events Add a public method in the observable reader to enable asynchronous notifications. Closes #34, closes #38 Refs: #12, eclipse-keypop/keypop-website#54 ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1748445847,"objectID":"03b6ed671df847a7fe95d07d922cdb1a","permalink":"https://keypop.org/community/contributing/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/community/contributing/","section":"community","summary":"Find out how to contribute to the Keypop project and how it can benefit your organization.","tags":null,"title":"How to contribute to Eclipse Keypop® project","type":"book"},{"authors":null,"categories":null,"content":"Keypop developments follow the definitions of ticketing terminal API issued by CNA: , starting with an initial development in Java for each interface evolution, followed by a porting in C++.\nCurrent work and future developments During 2025, a new interface dedicated to the administration of a Calypso security module of the ‘OpenSAM’ type should be developed. History of developments The information on functional evolutions for each Keypop API version matches precisely those indicated in the ticketing terminal API development history. Here’s the development integration history for each interface by programming language.\nTerminal API Version Short Summary Availability Date Java C++ Reader 2.0 first stable release 2023/11 2024/12 Card 2.0 first stable release 2023/11 2024/12 Calypso Card 2.1 PKI-based card secure session added 2024/04 in progress 2.0 first stable release 2023/11 2024/12 Calypso Crypto Symmetric 0.1 first stable release 2023/11 2024/12 Calypso Crypto Asymmetric 0.2 stable redesign 2024/04 2024/12 0.1 first architectural attempt 2023/11 skipped Calypso Legacy SAM 0.6 Get Data support on selection 2024/04 2024/12 0.5 issuance of CACert certificates for PKI card personalization 2024/04 skipped 0.4 added SAM lock support 2024/01 skipped 0.3 first stable release 2023/11 skipped ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1747926216,"objectID":"98d6f058a353aa178a1b39cefa20d88f","permalink":"https://keypop.org/community/roadmap/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/community/roadmap/","section":"community","summary":"Overview of past and future Keypop Releases.","tags":null,"title":"Project roadmap","type":"book"},{"authors":null,"categories":null,"content":"\nThis page serves as a centralized hub, bringing a dynamic chronological overview that showcases the progress and updates across all Keypop components repositories. Date Component 2025-07-21Keypop Storagecard Java Api0.3.0Added Exception hierarchy: New base class StorageCardException with block address context support: StorageCardException.getBlockAddress() method to retrieve the block address involved in errors. Enhanced exception handling: All storage card exceptions now extend StorageCardException and include block address context: CardIOException constructor now accepts blockAddress parameter. ReaderIOException constructor now accepts blockAddress parameter. UnexpectedCommandStatusException constructor now accepts blockAddress parameter. Product type capability: New ProductType.hasWriteAcknowledgment() method to indicate whether a storage card provides a reliable acknowledgment after write operations. Changed Write operation behavior: API contract updated for prepareWriteBlocks() method regarding verification reads: The API now specifies that implementations must handle verification reads transparently for storage cards without reliable write acknowledgment (e.g., SRT512/ST25). For cards with reliable write acknowledgment, no additional reads are required by the implementation. Applications can now rely on the API contract that data integrity is guaranteed without explicitly performing verification reads. Removed Deprecated exception: Removed InconsistentDataException class as it’s no longer needed with the new exception hierarchy. 2025-06-27Keypop Storagecard Java Api0.2.0Added System block management: New methods to handle system blocks for compatible storage card types: StorageCardTransactionManager.prepareReadSystemBlock() method. StorageCardTransactionManager.prepareWriteSystemBlock(byte[] data) method. StorageCard.getSystemBlock() method. ProductType.hasSystemBlock() method to indicate system block support by card type. Changed Parameter naming consistency across all APIs: renamed from blockNumber to blockAddress: StorageCardTransactionManager.prepareReadBlock(int blockAddress) method. StorageCardTransactionManager.prepareReadBlocks(int fromBlockAddress, int toBlockAddress) method. StorageCardTransactionManager.prepareWriteBlocks(int fromBlockAddress, byte[] data) method. StorageCardSelectionExtension.prepareReadBlock(int blockAddress) method. StorageCardSelectionExtension.prepareReadBlocks(int fromBlockAddress, int toBlockAddress) method. StorageCard.getBlock(int blockAddress) method. StorageCard.getBlocks(int fromBlockAddress, int toBlockAddress) method. Documentation improvements: Clarified that block addresses start at 0 and maximum value is getBlockCount() - 1. Enhanced documentation for zero-filled behavior when blocks haven’t been read. Fixed incorrect reference from ProductType.getBlockCount() to ProductType.getBlockSize() in write methods. Write operation behavior: Write commands no longer automatically update the StorageCard memory image due to storage card technology limitations. Applications must perform explicit read operations after writes to verify actual card content. 2025-06-25Keypop Storagecard Java Api0.1.0This is the initial release. 2025-03-20Keypop Calypso Card Java Api2.1.2Added Added clarification that preparePutData is not allowed in a secure session. 2025-03-18Keypop Calypso Card Java Api2.1.1⚠️ Security Fix\nSecurity Restrict methods prepareGetData, prepareReadRecord, prepareReadRecordsPartially and prepareSearchRecords from being used in secure session 2024-11-29Keypop Calypso Crypto Legacysam Java Api0.7.0Added New interface SamParameters to contains the SAM parameters. New method added to LegacySam: getSamParameters() to retrieve the parameters read from the SAM. getWorkKeyParameter(int recordNumber) to retrieve a read work key from its record number. getWorkKeyParameter(byte kif, byte kvc) to retrieve a read work key from its KIF and KVC. New method added to ReadTransactionManager: prepareReadSamParameters() to schedule the execution of “Read Parameters” command. prepareReadWorkKeyParameters(int recordNumber) to schedule the execution of “Read Key Parameters” command. prepareReadWorkKeyParameters(byte kif, byte kvc) to schedule the execution of “Read Key Parameters” command. New method added to FreeTransactionManager: preparePlainWriteLock(byte lockIndex, byte lockParameters, byte[] lockValue) to schedule the execution of “Write Key” command to write a lock in plain mode. New methods added to LegacySamApiFactory: createSecureWriteTransactionManager(CardReader samReader, LegacySam sam, SecuritySetting securitySetting) to manage secure SAM write transactions. New interface added SecureWriteTransactionManager: prepareWriteSamParameters(byte[] parameters) to schedule the execution of “Write Parameters” command. prepareTransferSystemKey(SystemKeyType systemKeyType, byte kvc, byte[] systemKeyParameters) to schedule the execution of “Write Key” command. …","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1748445847,"objectID":"9df4882bff6799b05e0bb341234f8f66","permalink":"https://keypop.org/community/changelog/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/community/changelog/","section":"community","summary":"This page serves as a centralized hub, bringing a dynamic chronological overview that showcases the progress and updates across all Keypop components repositories.","tags":null,"title":"Changelog","type":"book"},{"authors":null,"categories":null,"content":"\nKeypop offers a set of interfaces based on the specifications from the Calypso Networks Association, for the creation of software components dedicated to the management of smart card readers and smart card applications.\nThis section lists the APIs associated to the Reader \u0026amp; Card layers.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1748445847,"objectID":"6193e2d1a4bd8174840cbb2ece4a725b","permalink":"https://keypop.org/apis/overview/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apis/overview/","section":"apis","summary":"Keypop offers a set of interfaces based on the specifications from the Calypso Networks Association, for the creation of software components dedicated to the management of smart card readers and smart card applications.","tags":null,"title":"Keypop APIs","type":"book"},{"authors":null,"categories":null,"content":"\nThe Keypop Reader Layer APIs follow the architecture described by the CNA Reader Layer specifications.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1748445847,"objectID":"93f0944cacf001cbfb2880d7846ea0a3","permalink":"https://keypop.org/apis/reader-layer/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apis/reader-layer/","section":"apis","summary":"The Keypop Reader Layer APIs follow the architecture described by the CNA Reader Layer specifications.","tags":null,"title":"Reader Layer APIs","type":"book"},{"authors":null,"categories":null,"content":"\nThe Keypop Calypso APIs follow the architecture described by the CNA Card Layer - Calypso specifications.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1748445847,"objectID":"bec719851bec845246ff9e81f9b9479a","permalink":"https://keypop.org/apis/calypso-layer/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apis/calypso-layer/","section":"apis","summary":"The Keypop Calypso APIs follow the architecture described by the CNA Card Layer - Calypso specifications.","tags":null,"title":"Card Layer - Calypso APIs","type":"book"},{"authors":null,"categories":null,"content":"\nThe Keypop Storage Card APIs follow the architecture described by the CNA Card Layer - Storage Card specifications.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1748445847,"objectID":"4312ffac77d1af87c0f175969a842887","permalink":"https://keypop.org/apis/card-layer-storagecard/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apis/card-layer-storagecard/","section":"apis","summary":"The Keypop Storage Card APIs follow the architecture described by the CNA Card Layer - Storage Card specifications.","tags":null,"title":"Card Layer - Storage Card APIs","type":"book"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1748445847,"objectID":"43c0c4121ee50066f7d192a6504d86bf","permalink":"https://keypop.org/apis/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apis/","section":"apis","summary":"","tags":null,"title":"Keypop APIs","type":"book"},{"authors":null,"categories":null,"content":"\nLicense License of Keypop components\nContributing Find out how to contribute to the Keypop project and how it can benefit your organization.\nRoadmap Overview of past and future Keypop Releases.\nChangelog This page serves as a centralized hub, bringing a dynamic chronological overview that showcases the progress and updates across all Keypop components repositories.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1748445847,"objectID":"460964d71a5606848132aa51ae04f454","permalink":"https://keypop.org/community/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/community/","section":"community","summary":"License License of Keypop components\nContributing Find out how to contribute to the Keypop project and how it can benefit your organization.\nRoadmap Overview of past and future Keypop Releases.","tags":null,"title":"Community","type":"book"},{"authors":null,"categories":null,"content":" UML class diagram Design guide Changelog As part of the Card Layer, the Calypso Card API provides high-level functionality for selecting and performing transactions with Calypso cards.\nJava implementation Latest version 2.1.2 API documentation GitHub repository All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keypop:keypop-calypso-card-java-api:2.1.2\u0026#34;) implementation \u0026#39;org.eclipse.keypop:keypop-calypso-card-java-api:2.1.2\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keypop\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keypop-calypso-card-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.1.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; C++ implementation Latest version 2.0.0 API documentation GitHub repository ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1760516168,"objectID":"7ca54d5d1e32e5e324c46c102bd49bc2","permalink":"https://keypop.org/apis/calypso-layer/calypso-card-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apis/calypso-layer/calypso-card-api/","section":"apis","summary":"Public high-level API which standardizes the way to interact with a Calypso® product (card, NFC smartphone applet/application, SAM, etc.).","tags":null,"title":"Calypso Card API (external)","type":"book"},{"authors":null,"categories":null,"content":" UML class diagram Design guide Changelog As part of the Reader Layer, the Reader API provides high-level functionality for identifying, monitoring, configuring readers and process card selection scenarios.\nJava implementation Latest version 2.0.1 API documentation GitHub repository All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keypop:keypop-reader-java-api:2.0.1\u0026#34;) implementation \u0026#39;org.eclipse.keypop:keypop-reader-java-api:2.0.1\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keypop\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keypop-reader-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; C++ implementation Latest version 2.0.0 API documentation GitHub repository ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1760516168,"objectID":"f944a0c90eeb88534cf999c1fe9bf563","permalink":"https://keypop.org/apis/reader-layer/reader-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apis/reader-layer/reader-api/","section":"apis","summary":"Public API which defines the elements shared by the reader.","tags":null,"title":"Reader API (external)","type":"book"},{"authors":null,"categories":null,"content":" UML class diagram Design guide Changelog As part of the Card Layer, the Storage Card API provides high-level functionality for selecting and performing transactions with storage cards (NXP Mifare Ultralight, ST Microelectronics ST25 / SRT512, etc.).\nJava implementation Latest version 0.3.0 API documentation GitHub repository All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keypop:keypop-storagecard-java-api:0.3.0\u0026#34;) implementation \u0026#39;org.eclipse.keypop:keypop-storagecard-java-api:0.3.0\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keypop\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keypop-storagecard-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.3.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; C++ implementation Coming soon ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1748445847,"objectID":"8d8ea00e28803d72336bb6392a02761e","permalink":"https://keypop.org/apis/card-layer-storagecard/storagecard-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apis/card-layer-storagecard/storagecard-api/","section":"apis","summary":"Public high-level API which standardizes the way to interact with storage cards (NXP Mifare Ultralight, ST Microelectronics ST25 / SRT512, etc.).","tags":null,"title":"Storage Card API (external)","type":"book"},{"authors":null,"categories":null,"content":" UML class diagram Design guide Changelog As part of the Reader Layer, the Card API defines the internal elements shared by the reader layer to implement specific card layers (like the Calypso Card Layer).\nJava implementation Latest version 2.0.1 API documentation GitHub repository All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keypop:keypop-card-java-api:2.0.1\u0026#34;) implementation \u0026#39;org.eclipse.keypop:keypop-card-java-api:2.0.1\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keypop\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keypop-card-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.0.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; C++ implementation Latest version 2.0.0 API documentation GitHub repository ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1760516168,"objectID":"e2bdda8bb87505322c86726adff1e6c2","permalink":"https://keypop.org/apis/reader-layer/card-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apis/reader-layer/card-api/","section":"apis","summary":"Internal API which defines the elements shared between the reader layer and the card layer.","tags":null,"title":"Card API (internal)","type":"book"},{"authors":null,"categories":null,"content":" UML class diagram Design guide Changelog As part of the Card Layer, the Calypso Crypto Legacy SAM API provides high-level functionality for selecting and performing transactions with Calypso Legacy SAMs and can also be coupled with the Calypso Card API to handle the cryptographic calculations required for Calypso card transactions secured by symmetric keys.\nJava implementation Latest version 0.7.0 API documentation GitHub repository All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keypop:keypop-calypso-crypto-legacysam-java-api:0.7.0\u0026#34;) implementation \u0026#39;org.eclipse.keypop:keypop-calypso-crypto-legacysam-java-api:0.7.0\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keypop\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keypop-calypso-crypto-legacysam-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.7.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; C++ implementation Latest version 0.6.0 API documentation GitHub repository ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1760516168,"objectID":"7e2898f2efd8df8f8eb74c6576e811a9","permalink":"https://keypop.org/apis/calypso-layer/calypso-legacysam-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apis/calypso-layer/calypso-legacysam-api/","section":"apis","summary":"Public high-level API which standardizes the way to interact with a Calypso® legacy SAM product (SAM-C1, HSM-C1, etc.).","tags":null,"title":"Calypso Legacy SAM API (external)","type":"book"},{"authors":null,"categories":null,"content":" UML class diagram Design guide Changelog The Calypso Crypto Symmetric API is the communication interface between the Calypso Card and the Calypso Symmetric Crypto libraries.\nJava implementation Latest version 0.1.1 API documentation GitHub repository All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keypop:keypop-calypso-crypto-symmetric-java-api:0.1.1\u0026#34;) implementation \u0026#39;org.eclipse.keypop:keypop-calypso-crypto-symmetric-java-api:0.1.1\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keypop\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keypop-calypso-crypto-symmetric-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.1.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; C++ implementation Latest version 0.1.0 API documentation GitHub repository ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1760516168,"objectID":"d075c42c9c6f27441c4fba25a010ff7a","permalink":"https://keypop.org/apis/calypso-layer/calypso-symmetric-crypto-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apis/calypso-layer/calypso-symmetric-crypto-api/","section":"apis","summary":"Internal API which defines the elements shared between the Calypso Card and the Calypso Symmetric Crypto libraries.","tags":null,"title":"Calypso Symmetric Crypto API (internal)","type":"book"},{"authors":null,"categories":null,"content":" UML class diagram Design guide Changelog The Calypso Crypto Asymmetric API is the communication interface between the Calypso Card and the Calypso Asymmetric Crypto libraries.\nJava implementation Latest version 0.2.0 API documentation GitHub repository All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Kotlin Gradle Groovy Maven Copy implementation(\u0026#34;org.eclipse.keypop:keypop-calypso-crypto-asymmetric-java-api:0.2.0\u0026#34;) implementation \u0026#39;org.eclipse.keypop:keypop-calypso-crypto-asymmetric-java-api:0.2.0\u0026#39; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keypop\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keypop-calypso-crypto-asymmetric-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.2.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; C++ implementation Latest version 0.2.0 API documentation GitHub repository ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1760516168,"objectID":"cc523e31b078bd10e54608707846598a","permalink":"https://keypop.org/apis/calypso-layer/calypso-asymmetric-crypto-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apis/calypso-layer/calypso-asymmetric-crypto-api/","section":"apis","summary":"Internal API which defines the elements shared between the Calypso Card and the Calypso Asymmetric Crypto libraries.","tags":null,"title":"Calypso Asymmetric Crypto API (internal)","type":"book"}]