[{"authors":null,"categories":null,"content":" Types of contributions Thanks for your interest in the Eclipse Keypop® project.\nThere are several ways to contribute to the project:\n Propose a fix for a problem that is already known or that you have identified. In this case you will have to notify the issue in the repository where the problem appeared and reference the issue in all the other repositories affected by the fix. Propose the creation of a new component. In this case you will first have to create an issue in the repository https://github.com/eclipse-keypop to justify the need and request the creation of a new repository, wait for the issue to be resolved by the decision of the committers, and then create an issue in the new repository signifying the start of development of the new component.   Eclipse Contributor Agreement Before your contribution can be accepted by the project team contributors must electronically sign the Eclipse Contributor Agreement (ECA).\n http://www.eclipse.org/legal/ECA.php  Commits that are provided by non-committers must have a Signed-off-by field in the footer indicating that the author is aware of the terms by which the contribution has been provided to the project. The non-committer must additionally have an Eclipse Foundation account and must have a signed Eclipse Contributor Agreement (ECA) on file.\nFor more information, please see the Eclipse Committer Handbook: https://www.eclipse.org/projects/handbook/#contributing\n Contributing via fork  Check if there is already a GitHub issue for what you want to work on or create one. Announce in the comments section that you want to work on the issue. Also describe the solution you want to implement. To improve the chances for your contribution to be accepted, you\u0026rsquo;ll want to wait for the feedback of the committers. Fork the repository. Create a new branch from main for your changes. Name it after the issue number, e.g. #XXX_[description_of_changes]. Implement your changes. Rebase on main. Run ./gradlew spotlessApply to format the code and add licence headers to the files. Run ./gradlew build (to check code formatting and run tests) Commit your changes using the -s flag in order to add a Signed-off-by footer as mentioned above and use the same email address you are using for your GitHub account.\nUse commits messages that respect the commits message conventions. Push your changes to your forked repository. Submit a pull request referencing the related issue(s). After submitting, do not use your branch for any other development, otherwise further changes that you make will be visible in the PR.   Contributing as a project committer  Check if there is already a GitHub issue for what you want to work on or create one. Assign the issue to yourself. Create a new branch from main for your changes. Name it after the issue number, e.g. #XXX_[description_of_changes]. Implement your changes. Rebase on main. Run ./gradlew spotlessApply to format the code and add licence headers to the files. Run ./gradlew build (to check code formatting and run tests) Commit your changes. Use commits messages that respect the commits message conventions. Push the branch into the repository. Submit a pull request and ask somebody who is familiar with the code you modified to review it. If the reviewer approves and all checks are OK, merge using squash \u0026amp; commit method.   Commits message conventions In order to ensure good readability of the commit history, it is necessary to have consistency in the structure of the commit messages.\nTherefore, all contributors to the project are asked to respect the structure of the commits messages as described in the guide Conventional Commits 1.0.0:\n\u0026lt;type\u0026gt;[optional scope]: \u0026lt;description\u0026gt; [optional body] \u0026lt;footer(s)\u0026gt;  Furthermore, it is requested to indicate in the footer section the associated issue(s) that will be closed (Closes #xxx, closes #yyy, etc...). This will automatically close the associated issue(s) when the pull request is validated (see GitHub Docs for more details).\nIt is also required to indicate possible references to other associated issues (Refs: #aaa, #bbbb, repository_owner/other_repository_name#ccc, etc...).\nHere is fictive example:\nfeat(observation): allow asynchronous notification of reader events Add a public method in the observable reader to enable asynchronous notifications. Closes #34, closes #38 Refs: #12, eclipse-keypop/keypop-website#54  ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1693581209,"objectID":"03b6ed671df847a7fe95d07d922cdb1a","permalink":"https://eclipse-keypop.github.io/keypop-website/community/contributing/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/community/contributing/","section":"community","summary":"Find out how to contribute to the Keypop project and how it can benefit your organization.","tags":null,"title":"How to contribute to Eclipse Keypop® project","type":"book"},{"authors":null,"categories":null,"content":"  This page serves as a centralized hub, bringing a dynamic chronological overview that showcases the progress and updates across all Keypop components repositories.     Date Component      ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1693581209,"objectID":"9df4882bff6799b05e0bb341234f8f66","permalink":"https://eclipse-keypop.github.io/keypop-website/community/changelog/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/community/changelog/","section":"community","summary":"This page serves as a centralized hub, bringing a dynamic chronological overview that showcases the progress and updates across all Keypop components repositories.","tags":null,"title":"Changelog","type":"book"},{"authors":null,"categories":null,"content":"  Contributing Find out how to contribute to the Keypop project and how it can benefit your organization.\n  Changelog This page serves as a centralized hub, bringing a dynamic chronological overview that showcases the progress and updates across all Keypop components repositories.\n  ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1693581209,"objectID":"460964d71a5606848132aa51ae04f454","permalink":"https://eclipse-keypop.github.io/keypop-website/community/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/community/","section":"community","summary":"Contributing Find out how to contribute to the Keypop project and how it can benefit your organization.\n  Changelog This page serves as a centralized hub, bringing a dynamic chronological overview that showcases the progress and updates across all Keypop components repositories.","tags":null,"title":"Community","type":"book"},{"authors":null,"categories":null,"content":"Release procedure  Create a branch dedicated to the current release. Check gradle.properties file:  Check the consistency of the version.   Check build.gradle.kts file:  Use only released dependencies. Upgrade Keypop dependencies to their latest released versions.   Update CHANGELOG.md file:  Verify the consistency of the Unreleased section. Move content of Unreleased section to a new \u0026ldquo;release\u0026rdquo; section. Update bottom links.   Build and test the component. Commit the modified files using if possible the commit message Release x.y.z. Push and create a pull request to merge the branch into main. Await the success of the build by the CI. Squash and merge the pull request. Await the success of the build by the CI. Create a release on GitHub:  Set tag x.y.z Set release name x.y.z Set the content by copying/pasting the content of the current release description in the CHANGELOG.md file without the bottom links.   Await the success of the build by the CI. Connect to Nexus Repository Manager of Calypsonet and go to \u0026ldquo;Staging Repositories\u0026rdquo; page:  Select the correct folder to Close \u0026amp; Release. It must contain the manifests, the JAR and all the others elements (sources, javadoc). Close the folder. Release the folder. The other unwanted folders could be dropped.   Check the availability of the release on the Maven Repository. This step may take from 10 minutes to 2 hours. Update this website:  Update version in params.yaml file. Update others elements if needed. Commit and push the modifications.    ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1693584047,"objectID":"be8ec78af1ceb94560f6fb17d4ec6af9","permalink":"https://eclipse-keypop.github.io/keypop-website/guides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/guides/","section":"guides","summary":"Release procedure  Create a branch dedicated to the current release. Check gradle.properties file:  Check the consistency of the version.   Check build.gradle.kts file:  Use only released dependencies.","tags":null,"title":"Maintenance Guides","type":"book"},{"authors":null,"categories":null,"content":" Keypop offers a set of interfaces based on the specifications from the Calypso Networks Association, for the creation of software components dedicated to the management of smart card readers and smart card applications.\nThe diagram below shows the dependencies between the client application, the Keypop APIs and their implementations:\n  Key points:\n Independent Lifecycle: Each API follows its own distinct lifecycle. Interface-Exclusive: APIs exclusively consist of interfaces. Public APIs: Some APIs are intended to be used by application developers. Internal Usage: Some APIs are dedicated to internal use, and intended to developers of Keypop-based implementations.  ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1693581209,"objectID":"43c0c4121ee50066f7d192a6504d86bf","permalink":"https://eclipse-keypop.github.io/keypop-website/apis/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apis/","section":"apis","summary":"General presentation of the dependencies between the different Keypop APIs.","tags":null,"title":"Keypop architecture - APIs \u0026 software layers","type":"book"},{"authors":null,"categories":null,"content":" Overview As part of the Reader Layer, the Reader API provides high-level functionality for identifying, monitoring, configuring readers and process card selection scenarios.\nThe documentation for the specification produced by the Calypso Networks Association, on which this API is based, is available here.\n Java implementation  1.3.0  API documentation  UML  GitHub repository  Changelog   All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Groovy  Gradle Kotlin  Maven   Copy implementation \u0026#39;org.eclipse.keypop:keypop-reader-java-api:1.3.0\u0026#39;  implementation(\u0026#34;org.eclipse.keypop:keypop-reader-java-api:1.3.0\u0026#34;)  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keypop\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keypop-reader-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.3.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;   C++ implementation  1.0.0  API documentation  UML  GitHub repository    The third version number (x.y.z) only concerns updates of the javadoc because this component does not contain any implementation, but only an API.   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1693581209,"objectID":"31e99306539cbdaaf106f0d6caaec0bb","permalink":"https://eclipse-keypop.github.io/keypop-website/apis/keypop-reader-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apis/keypop-reader-api/","section":"apis","summary":"Public API which defines the elements shared by the reader.","tags":null,"title":"Keypop Reader API","type":"book"},{"authors":null,"categories":null,"content":" Overview The Card API is the communication interface between the Reader Layer and the Card Layer (e.g. Calypso Card API).\nThe documentation for the specification produced by the Calypso Networks Association, on which this API is based, is available here.\n Java implementation  1.0.0  API documentation  UML  GitHub repository  Changelog   All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Groovy  Gradle Kotlin  Maven   Copy implementation \u0026#39;org.eclipse.keypop:keypop-card-java-api:1.0.0\u0026#39;  implementation(\u0026#34;org.eclipse.keypop:keypop-card-java-api:1.0.0\u0026#34;)  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keypop\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keypop-card-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.0.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;   C++ implementation  1.0.0  API documentation  UML  GitHub repository    The third version number (x.y.z) only concerns updates of the javadoc because this component does not contain any implementation, but only an API.   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1693581209,"objectID":"99dbf5149b87168d4a1e8e272647badc","permalink":"https://eclipse-keypop.github.io/keypop-website/apis/keypop-card-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apis/keypop-card-api/","section":"apis","summary":"Internal API which defines the elements shared between the reader layer and the card layer.","tags":null,"title":"Keypop Card API","type":"book"},{"authors":null,"categories":null,"content":" Overview As part of the Card Layer, the Calypso Card API provides high-level functionality for selecting and performing transactions with Calypso cards.\nThe documentation for the specification produced by the Calypso Networks Association, on which this API is based, is available here.\n Java implementation  1.8.0  API documentation  UML  GitHub repository  Changelog   All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Groovy  Gradle Kotlin  Maven   Copy implementation \u0026#39;org.eclipse.keypop:keypop-calypso-card-java-api:1.8.0\u0026#39;  implementation(\u0026#34;org.eclipse.keypop:keypop-calypso-card-java-api:1.8.0\u0026#34;)  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keypop\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keypop-calypso-card-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.8.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;   C++ implementation  1.1.0  API documentation  UML  GitHub repository    The third version number (x.y.z) only concerns updates of the javadoc because this component does not contain any implementation, but only an API.   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1693581209,"objectID":"674583aa63934b912a4db375ff35dec0","permalink":"https://eclipse-keypop.github.io/keypop-website/apis/keypop-calypso-card-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apis/keypop-calypso-card-api/","section":"apis","summary":"Public high-level API which standardizes the way to interact with a Calypso® product (card, NFC smartphone applet/application, SAM, etc...).","tags":null,"title":"Keypop Calypso Card API","type":"book"},{"authors":null,"categories":null,"content":" Overview As part of the Card Layer, the Calypso Crypto Legacy SAM API provides high-level functionality for selecting and performing transactions with Calypso Legacy SAMs and can also be coupled with the Calypso API to handle the cryptographic calculations required for Calypso card transactions secured by symmetric keys.\nThe documentation for the specification produced by the Calypso Networks Association, on which this API is based, is available here.\n Java implementation  0.2.0  API documentation  UML  GitHub repository  Changelog   All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Groovy  Gradle Kotlin  Maven   Copy implementation \u0026#39;org.eclipse.keypop:keypop-calypso-crypto-legacysam-java-api:0.2.0\u0026#39;  implementation(\u0026#34;org.eclipse.keypop:keypop-calypso-crypto-legacysam-java-api:0.2.0\u0026#34;)  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.eclipse.keypop\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;keypop-calypso-crypto-legacysam-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.2.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;   C++ implementation  work in progress\u0026hellip;    The third version number (x.y.z) only concerns updates of the javadoc because this component does not contain any implementation, but only an API.   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1693581209,"objectID":"6166e08d9a84fae9b139d6a5485e08a2","permalink":"https://eclipse-keypop.github.io/keypop-website/apis/keypop-calypso-crypto-legacysam-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apis/keypop-calypso-crypto-legacysam-api/","section":"apis","summary":"Public high-level API which standardizes the way to interact with a Calypso® legacy SAM product (SAM-C1, HSM-C1, etc...).","tags":null,"title":"Keypop Calypso Crypto Legacy SAM API","type":"book"}]